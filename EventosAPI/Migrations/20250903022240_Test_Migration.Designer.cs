// <auto-generated />
using System;
using EventosAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventosAPI.Migrations
{
    [DbContext(typeof(EventoContext))]
    [Migration("20250903022240_Test_Migration")]
    partial class Test_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventosAPI.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lugar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Eventos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fecha = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lugar = "Auditorio Principal",
                            Nombre = "Conferencia de Tecnología"
                        },
                        new
                        {
                            Id = 2,
                            Fecha = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lugar = "Sala de Conferencias A",
                            Nombre = "Taller de Desarrollo Web"
                        });
                });

            modelBuilder.Entity("EventosAPI.Models.Organizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("Organizadores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "Coordinador",
                            EventoId = 1,
                            Nombre = "Carlos López"
                        },
                        new
                        {
                            Id = 2,
                            Cargo = "Asistente",
                            EventoId = 2,
                            Nombre = "Ana Martínez"
                        });
                });

            modelBuilder.Entity("EventosAPI.Models.Participante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("Participantes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "JuanP@gmail.com",
                            EventoId = 1,
                            Nombre = "Juan Pérez"
                        },
                        new
                        {
                            Id = 2,
                            Email = "MariaG@gmail.com",
                            EventoId = 2,
                            Nombre = "María Gómez"
                        });
                });

            modelBuilder.Entity("EventosAPI.Models.Organizador", b =>
                {
                    b.HasOne("EventosAPI.Models.Evento", "Evento")
                        .WithMany("Organizadores")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("EventosAPI.Models.Participante", b =>
                {
                    b.HasOne("EventosAPI.Models.Evento", "Evento")
                        .WithMany("Participantes")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("EventosAPI.Models.Evento", b =>
                {
                    b.Navigation("Organizadores");

                    b.Navigation("Participantes");
                });
#pragma warning restore 612, 618
        }
    }
}
